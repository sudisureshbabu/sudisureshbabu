{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "sudi-synapse-course-ws"
		},
		"ls_Cosmos_db_nyc_taxi_data_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_Cosmos_db_nyc_taxi_data'"
		},
		"ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_serverless_sql_pool_db_nyc_taxi_ldw'"
		},
		"sudi-synapse-course-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sudi-synapse-course-ws-WorkspaceDefaultSqlServer'"
		},
		"ls_sudisynapsecoursedl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sudisynapsecoursedl.dfs.core.windows.net/"
		},
		"sudi-synapse-course-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sudisynapsecoursedl.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nSELECT DISTINCT\n        YEAR\n      , MONTH\nFROM SILVER.vw_trip_data_green\nORDER BY year, month ASC;"
								}
							]
						}
					},
					{
						"name": "ForEach Year and Month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Year and Month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"batchCount": 3,
							"activities": [
								{
									"name": "Delete Partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().Year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Create Gold Trip Data Green View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "use nyc_taxi_ldw;"
								},
								{
									"type": "NonQuery",
									"text": "DROP VIEW IF EXISTS gold.vw_trip_data_green"
								},
								{
									"type": "NonQuery",
									"text": "CREATE VIEW gold.vw_trip_data_green\nAS\nselect\ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ngtd.*\nFrom OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_src'\n) with (\n    borough VARCHAR(15),\n    trip_date date,\n    trip_day  VARCHAR(10),\n    trip_day_weekend_ind CHAR(1),\n    card_trip_count INT,\n    cash_trip_count INT,\n    Street_Hail_Trip_count INT,\n    Dispatch_Trip_count INT,\n    trip_distance FLOAT,\n    trip_duration_minutes INT,\n    fare_amount FLOAT\n) as gtd;"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-02T10:00:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_trip_data_green_agg')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create Gold Trip Data Green Agg",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "1_spark_create_gold_trip_data_green_agg",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "sudissynapse",
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-08T19:35:46Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/1_spark_create_gold_trip_data_green_agg')]",
				"[concat(variables('workspaceId'), '/bigDataPools/sudissynapse')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach Folder Path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_folder_path_sp_name_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Silver Folders",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Silver Tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver Folders",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().sp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"v_folder_path_sp_name_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calendar",
								"sp_name": "silver.sp_silver_calendar"
							},
							{
								"folder_path": "silver/taxi_zone",
								"sp_name": "silver.sp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"sp_name": "silver.sp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"sp_name": "silver.sp_silver_vendor"
							},
							{
								"folder_path": "silver/rate_code",
								"sp_name": "silver.sp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"sp_name": "silver.sp_silver_payment_type"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-01T20:11:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID ( 'silver.taxi_zone') is NOT NULL\n    drop EXTERNAL TABLE silver.taxi_zone;"
								},
								{
									"type": "NonQuery",
									"text": "    CREATE EXTERNAL TABLE silver.taxi_zone \n        WITH (\n            LOCATION = 'silver/taxi_zone',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\n    SELECT *from bronze.taxi_zone;"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Demo"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-02T10:00:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone_sp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Silver Taxi Zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[sp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Demo"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-02T10:00:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Trip Year and Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nSELECT DISTINCT \n         year\n       , month\nFROM BRONZE.vw_trip_data_green_csv\norder by year, month ASC;"
								}
							]
						}
					},
					{
						"name": "ForEach Year and Month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Trip Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Trip Year and Month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"batchCount": 3,
							"activities": [
								{
									"name": "Delete Partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create Partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().Year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Create Silver Trip Data Green View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Year and Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "use nyc_taxi_ldw;"
								},
								{
									"type": "NonQuery",
									"text": "DROP VIEW IF EXISTS SILVER.vw_trip_data_green;"
								},
								{
									"type": "NonQuery",
									"text": "CREATE VIEW SILVER.vw_trip_data_green\nAS\nselect\ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ngtd.*\nFrom OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_src'\n) with (\n    vendor_id\t\t\t\t int,\n    lpep_pickup_datetime     datetime2(7),\n    lpep_dropoff_datetime    datetime2(7),\n    store_and_fwd_flag       varchar(1),\n    ratecode_id               int,\n    pu_location_id             int,\n    do_location_id             int,\n    passenger_count          int,\n    trip_distance            float,\n    fare_amount              float,\n    extra                    float,\n    mta_tax                  float,\n    tip_amount               float,\n    tolls_amount             float,\n    ehail_fee                int,\n    improvement_surcharge    float,\n    total_amount             float,\n    payment_type             int,\n    trip_type                int,\n    congestion_surcharge     float\n) as gtd;"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-01T22:14:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_execute_all_pipelines')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Create Silver Table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Create Silver Trip Data Green",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Create Gold Trip Data Green",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Create Silver Trip Data Green",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Create Silver Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_gold_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Create Gold Trip Data Green Agg",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Create Silver Trip Data Green",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_gold_trip_data_green_agg",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-08T19:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_tables')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_trip_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_gold_trip_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_gold_trip_data_green_agg')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sudisynapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "location_id",
						"type": "INT_16"
					},
					{
						"name": "borough",
						"type": "UTF8"
					},
					{
						"name": "zone",
						"type": "UTF8"
					},
					{
						"name": "service_zone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_sudisynapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sudisynapsecoursedl",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demo"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "location_id",
						"type": "INT_16"
					},
					{
						"name": "borough",
						"type": "UTF8"
					},
					{
						"name": "zone",
						"type": "UTF8"
					},
					{
						"name": "service_zone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_sudisynapsecoursedl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_Cosmos_db_nyc_taxi_data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('ls_Cosmos_db_nyc_taxi_data_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_serverless_sql_pool_db_nyc_taxi_ldw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_sudisynapsecoursedl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_sudisynapsecoursedl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sudi-synapse-course-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sudi-synapse-course-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sudi-synapse-course-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sudi-synapse-course-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tr_nyc_taxi_load')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_execute_all_pipelines",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2022-09-02T09:50:00",
						"endTime": "2022-09-03T10:35:00",
						"timeZone": "New Zealand Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_execute_all_pipelines')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_Check_for_Duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- check for duplicates in tax_zone file\n\nSELECT\ntz.borough, \ncount(*) as NO_OF_RECORDS\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2 ,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        location_id SMALLINT 1 ,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )\n    AS tz\n    group by tz.borough\n    HAVING count(*) > 1\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nIF OBJECT_ID ( 'silver.rate_code') is NOT NULL\n    drop EXTERNAL TABLE silver.rate_code\n    -- creating external table rate_code\n    CREATE EXTERNAL TABLE silver.rate_code \n        WITH (\n            LOCATION = 'silver/rate_code',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\nselect \nrate_code_id, rate_code\nFrom OPENROWSET (\n    BULK 'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_SRC',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as RATE_CODE\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n)\nGO\n\nSELECT * from silver.rate_code\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nIF OBJECT_ID ( 'silver.payment_type') is NOT NULL\n    drop EXTERNAL TABLE silver.payment_type\n    -- creating external table payment_type\n    CREATE EXTERNAL TABLE silver.payment_type \n        WITH (\n            LOCATION = 'silver/payment_type',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\nselect \npayment_type, description\nFrom OPENROWSET (\n    BULK 'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0a',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as PAYMENT_TYPE\nCROSS APPLY openjson(jsonDoc)\nWITH(\n    payment_type SMALLINT,\n    description VARCHAR(20) '$.payment_type_desc'\n)\nGO\n\nSELECT * from silver.payment_type\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_data_quality_checks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- identify any data quality issue in trip amount\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n;\n\nSELECT\n    min(gtd.total_amount) as MIN_TOTAL_AMOUNT,\n    max(gtd.total_amount) as MAX_TOTAL_AMOUNT,\n    avg(gtd.total_amount) as AVG_TOTAL_AMOUNT,\n    count(1) as total_number_of_records,\n    count(gtd.total_amount) as not_null_total_amount_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS gtd\n;\n\nSELECT\n  gtd.Payment_type, count(*)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS gtd\n    where gtd.total_amount < 0\n    group by  gtd.Payment_type\n;\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nIF OBJECT_ID ( 'silver.trip_data_green_2020_01') is NOT NULL\n   drop EXTERNAL TABLE silver.trip_data_green_2020_01\n--    -- creating external table trip_data_green\n--    CREATE EXTERNAL TABLE silver.trip_data_green \n--        WITH (\n--            LOCATION = 'silver/trip_data_green',  \n--            DATA_SOURCE = nyc_taxi_src,  \n--            FILE_FORMAT = parquet_file_format  \n--        )\n--    AS\n--    SELECT *from bronze.trip_data_green_csv\nGO\n\n\nexec silver.usp_silver_trip_data_green '2020', '01'\nGO\nexec silver.usp_silver_trip_data_green '2020', '02'\nGO\nexec silver.usp_silver_trip_data_green '2020', '03'\nGO\nexec silver.usp_silver_trip_data_green '2020', '04'\nGO\nexec silver.usp_silver_trip_data_green '2020', '05'\nGO\nexec silver.usp_silver_trip_data_green '2020', '06'\nGO\nexec silver.usp_silver_trip_data_green '2020', '07'\nGO\nexec silver.usp_silver_trip_data_green '2020', '08'\nGO\nexec silver.usp_silver_trip_data_green '2020', '09'\nGO\nexec silver.usp_silver_trip_data_green '2020', '10'\nGO\nexec silver.usp_silver_trip_data_green '2020', '11'\nGO\nexec silver.usp_silver_trip_data_green '2020', '12'\nGO\nexec silver.usp_silver_trip_data_green '2021', '01'\nGO\nexec silver.usp_silver_trip_data_green '2021', '02'\nGO\nexec silver.usp_silver_trip_data_green '2021', '03'\nGO\nexec silver.usp_silver_trip_data_green '2021', '04'\nGO\nexec silver.usp_silver_trip_data_green '2021', '05'\nGO\nexec silver.usp_silver_trip_data_green '2021', '06'\nGO\nexec silver.usp_silver_trip_data_green '2021', '07'\nGO\n\nselect TOP 10 *from bronze.vw_trip_data_green_csv\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n--- Identify the number of trips made from each borough\nselect \nTOP 100\n*\nFrom OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT ='CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n) as gtd\n--WHERE PULocationID is null\n;\n\n\n--- Joining two tables\nSELECT\n taxi_zone.*,gtd.*\nfrom\n    OPENROWSET(\n                    BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n                    DATA_SOURCE = 'nyc_taxi_data_raw',\n                    FORMAT ='PARQUET'\n                ) as gtd\n    JOIN\n    OPENROWSET(\n                    BULK 'taxi_zone.csv',\n                    DATA_SOURCE = 'nyc_taxi_data_raw',\n                    FORMAT = 'CSV',\n                    PARSER_VERSION = '2.0',\n                    FIRSTROW = 2 \n        ) WITH(\n            location_id SMALLINT 1 ,\n            borough VARCHAR(15) 2,\n            zone VARCHAR(50) 3,\n            service_zone VARCHAR(15) 4\n        )\n        AS taxi_zone\n        ON gtd.PULocationID = taxi_zone.location_id\n    ;\n        \n\n--- Joining two tables\nSELECT\n taxi_zone.borough, count(1) as number_of_trips\nfrom\n    OPENROWSET(\n                    BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n                    DATA_SOURCE = 'nyc_taxi_data_raw',\n                    FORMAT ='PARQUET'\n                ) as gtd\n    JOIN\n    OPENROWSET(\n                    BULK 'taxi_zone.csv',\n                    DATA_SOURCE = 'nyc_taxi_data_raw',\n                    FORMAT = 'CSV',\n                    PARSER_VERSION = '2.0',\n                    FIRSTROW = 2 \n        ) WITH(\n            location_id SMALLINT 1 ,\n            borough VARCHAR(15) 2,\n            zone VARCHAR(50) 3,\n            service_zone VARCHAR(15) 4\n        )\n        AS taxi_zone\n        ON gtd.PULocationID = taxi_zone.location_id\n        group by taxi_zone.borough\n        order by count(1) DESC\n    ; ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nDROP VIEW IF EXISTS SILVER.vw_trip_data_green\nGO\n\nCREATE VIEW SILVER.vw_trip_data_green\nAS\nselect\ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ngtd.*\nFrom OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_src'\n) with (\n    vendor_id\t\t\t\t int,\n    lpep_pickup_datetime     datetime2(7),\n    lpep_dropoff_datetime    datetime2(7),\n    store_and_fwd_flag       varchar(1),\n    ratecode_id               int,\n    pu_location_id             int,\n    do_location_id             int,\n    passenger_count          int,\n    trip_distance            float,\n    fare_amount              float,\n    extra                    float,\n    mta_tax                  float,\n    tip_amount               float,\n    tolls_amount             float,\n    ehail_fee                int,\n    improvement_surcharge    float,\n    total_amount             float,\n    payment_type             int,\n    trip_type                int,\n    congestion_surcharge     float\n) as gtd\nGO\n\nselect \nTOP 100 \n* FROM SILVER.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_simple_transfermation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n--Number of trips made by duration\n\nselect \nTOP 100\ngtd.lpep_pickup_datetime\n, gtd.lpep_dropoff_datetime\n, DATEDIFF(minute, gtd.lpep_pickup_datetime, gtd.lpep_dropoff_datetime ) / 60 as from_date\n, DATEDIFF(minute, gtd.lpep_pickup_datetime, gtd.lpep_dropoff_datetime ) / 60 + 1 as to_date\nFrom OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n) as gtd\n;\n\nselect \n DATEDIFF(minute, gtd.lpep_pickup_datetime, gtd.lpep_dropoff_datetime ) / 60 as from_date\n, DATEDIFF(minute, gtd.lpep_pickup_datetime, gtd.lpep_dropoff_datetime ) / 60 + 1 as to_date\n, count(1) as no_of_trips\nFrom OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n) as gtd\ngroup by DATEDIFF(minute, gtd.lpep_pickup_datetime, gtd.lpep_dropoff_datetime ) / 60\n        , DATEDIFF(minute, gtd.lpep_pickup_datetime, gtd.lpep_dropoff_datetime ) / 60 + 1\nORDER by from_date, to_date\n;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nselect *from SILVER.TAXI_ZONE;\n\nSELECT \ntdg.year,\ntdg.month,\ntz.borough,\nconvert(DATE, lpep_pickup_datetime) as trip_date,\ncal.day_name as trip_day,\nCASE WHEN cal.day_name in ('Saturday','Sunday') THEN 'Y' else 'N' END as trip_day_weekend_ind,\nsum(CASE WHEN PT.description = 'Credit Card' THEN 1 else 0 end) as card_trip_count,\nsum(CASE WHEN PT.description = 'Cash' THEN 1 else 0 end) as cash_trip_count\nfrom SILVER.vw_trip_data_green tdg\nJOIN SILVER.TAXI_ZONE TZ on (tdg.pu_location_id = tz.location_id)\nJOIN silver.calendar CAL on (cal.date = convert(DATE, lpep_pickup_datetime))\nJOIN SILVER.Payment_type pt on (tdg.payment_type = pt.payment_type)\nwhere tdg.year = '2020'\n--and tdg.month = '01'\ngroup by tdg.year,\n         tdg.month,\n         tz.borough,\n         convert(DATE, lpep_pickup_datetime), \n         cal.day_name\nGO\n\nexec gold.usp_gold_trip_data_green '2020', '01';\nexec gold.usp_gold_trip_data_green '2020', '02';\nexec gold.usp_gold_trip_data_green '2020', '03';\nexec gold.usp_silver_trip_data_green '2020', '04';\nexec gold.usp_silver_trip_data_green '2020', '05';\nexec gold.usp_silver_trip_data_green '2020', '06';\nexec gold.usp_silver_trip_data_green '2020', '07';\nexec gold.usp_silver_trip_data_green '2020', '08';\nexec gold.usp_silver_trip_data_green '2020', '09';\nexec gold.usp_silver_trip_data_green '2020', '10';\nexec gold.usp_silver_trip_data_green '2020', '11';\nexec gold.usp_silver_trip_data_green '2020', '12';\nexec gold.usp_silver_trip_data_green '2021', '01';\nexec gold.usp_silver_trip_data_green '2021', '02';\nexec gold.usp_silver_trip_data_green '2021', '03';\nexec gold.usp_silver_trip_data_green '2021', '04';\nexec gold.usp_silver_trip_data_green '2021', '05';\nexec gold.usp_silver_trip_data_green '2021', '06';\nexec gold.usp_silver_trip_data_green '2021', '07';\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_discovery_assignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n/*\nIdentify the percentage of cash and card payments by borough \nExample Data as below\n------------------------------------------------------------------------------------------------------\nborough     total_trips     cash_trips      card_trips  cash_trips_percentage   card_trips_percentage\n------------------------------------------------------------------------------------------------------\nBronx       2019            751             1268        37.20                   62.80\nBrooklyn    6435            2192            4243        34.06                   65.94\n------------------------------------------------------------------------------------------------------\n*/\n\nSELECT\n*\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2 ,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        location_id SMALLINT 1 ,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    ) as TZ\n    ;\n\nWITH v_payment_type as \n(select \n        CAST(JSON_VALUE(jsonDoc, '$.payment_type') as SMALLINT) as paymment_type,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') as VARCHAR(15)) as paymment_type_desc\nFrom OPENROWSET (\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0a',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as PAYMENT_TYPE\n),\nv_taxi_zone as \n(\nSELECT\n*\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2 ,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        location_id SMALLINT 1 ,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    ) as [result]   \n),\nv_trip_data AS\n(\nSELECT\n*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2021/month=01/**',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n)\nselect \n v_taxi_zone.borough\n , count(1) as total_trips\n , sum(CASE when v_payment_type.paymment_type_desc  = 'Cash' then 1 else 0 end) as Cash_trip\n , sum(CASE when v_payment_type.paymment_type_desc  = 'Credit card' then 1 else 0 end) as Card_trip\n , CAST( \n     (sum(CASE when v_payment_type.paymment_type_desc  = 'Cash' then 1 else 0 end) / CAST(count(1) as DECIMAL))*100 as DECIMAL(5, 2)) as cash_trip_percentage\n , CAST( \n     (sum(CASE when v_payment_type.paymment_type_desc  = 'Credit card' then 1 else 0 end) / CAST(count(1) as DECIMAL))*100 as DECIMAL(5, 2)) as card_trip_percentage\nFrom v_trip_data\nLEFT join v_payment_type on (v_trip_data.payment_type = v_payment_type.paymment_type)\nLEFT join v_taxi_zone on (v_trip_data.PULocationId = v_taxi_zone.Location_id )\nwhere v_payment_type.paymment_type_desc in ('Cash','Credit card')\nGroup by v_taxi_zone.borough\norder by v_taxi_zone.borough\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nDROP VIEW IF EXISTS gold.vw_trip_data_green\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nselect\ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ngtd.*\nFrom OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_src'\n) with (\n    borough VARCHAR(15),\n    trip_date date,\n    trip_day  VARCHAR(10),\n    trip_day_weekend_ind CHAR(1),\n    card_trip_count INT,\n    cash_trip_count INT,\n    Street_Hail_Trip_count INT,\n    Dispatch_Trip_count INT,\n    trip_distance FLOAT,\n    trip_duration_minutes INT,\n    fare_amount FLOAT\n) as gtd\nGO\n\nselect \n--TOP 100 \n* FROM gold.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE MASTER\nGO\n\ncreate database nyc_taxi_ldw\nGO\n\nAlter database nyc_taxi_ldw COLLATE Latin1_General_100_CI_AI_SC_UTF8;\nGO\n\nuse nyc_taxi_ldw\nGO\n\ncreate schema bronze\nGO\n\ncreate schema silver\nGO\n\ncreate schema gold\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://sudisynapsecoursedl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n;\n\n---ABFSS protocal\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE ,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n    ;\n--Examine the data types\nexec sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE \n    ) AS [result]'\n    ;\n\n\n---ABFSS protocal\nSELECT\n    max(LEN(locationID)) as Len_locationID,\n    max(LEN(Borough)) as Len_Borough,\n    max(LEN(Zone)) as Len_Zone,\n    max(LEN(service_zone)) as Len_service_zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE ,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n    ;\n\n---USe with clause to provide explicit data type\nSELECT\n*\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE ,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )\n    AS [result]\n    ;\n\n\n\n---Specify the collation type as UTF8\nSELECT\n*\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE ,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        LocationID SMALLINT ,\n        Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        Zone VARCHAR(50) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        service_zone VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n    )\n    AS [result]\n    ;\n\n\nCREATE DATABASE nyc_taxi_discovery;\n\nuse nyc_taxi_discovery;\n\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\nselect name, collation_name from sys.databases;\n\n---USe with clause to provide explicit data type\nSELECT\n*\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE ,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )\n    AS [result]\n    ;\n\n---Fix column names\nSELECT\n*\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2 ,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) WITH(\n        location_id SMALLINT 1 ,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )\n    AS [result]\n    ;\n\n-- Create External data source\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data_raw \nWITH(\n    LOCATION = 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/raw'\n)\n\n--Drop External data source\nDROP EXTERNAL DATA SOURCE nyc_taxi_data;\n\nselect name, location from sys.external_data_sources;\n\ndesc sys.external_data_sources;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_sp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n    \n    SET @create_sql_stmt = \n    'CREATE EXTERNAL TABLE silver.trip_data_green_' + @year +'_' + @month +\n        ' WITH (\n            LOCATION = ''silver/trip_data_green/year=' + @year +'/month=' + @month +''',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\n    SELECT [VendorID] as vendor_id\t\t\t\n            ,[lpep_pickup_datetime]   \n            ,[lpep_dropoff_datetime]  \n            ,[store_and_fwd_flag]     \n            ,[RatecodeID] as ratecode_id            \n            ,[PULocationID] as pu_location_id           \n            ,[DOLocationID] as do_location_id          \n            ,[passenger_count]        \n            ,[trip_distance]          \n            ,[fare_amount]            \n            ,[extra]                  \n            ,[mta_tax]                \n            ,[tip_amount]             \n            ,[tolls_amount]           \n            ,[ehail_fee]              \n            ,[improvement_surcharge]  \n            ,[total_amount]           \n            ,[payment_type]           \n            ,[trip_type]              \n            ,[congestion_surcharge]\n    from bronze.vw_trip_data_green_csv \n    where YEAR ='''+ @year +''' \n    and MONTH='''+ @month +'''';\n   \n   print(@create_sql_stmt);\n\n   EXEC SP_executesql @create_sql_stmt;\n\n   SET @drop_sql_stmt = 'DROP EXTERNAL TABLE silver.trip_data_green_' + @year +'_' + @month;\n\n   print(@drop_sql_stmt);\n\n   EXEC SP_executesql @drop_sql_stmt;\n\nEND\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_sp_silver_trip_data_green_sample')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nIF OBJECT_ID ( 'silver.trip_data_green_2020_01') is NOT NULL\n    drop EXTERNAL TABLE silver.trip_data_green_2020_01\n    -- creating external table trip_data_green_2020_01\n    CREATE EXTERNAL TABLE silver.trip_data_green_2020_01 \n        WITH (\n            LOCATION = 'silver/trip_data_green/year=2020/month=01',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\n    SELECT *from bronze.vw_trip_data_green_csv where YEAR ='2020' and MONTH='01'\nGO\n\nSELECT *from silver.trip_data_green_2020_01\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_synapse_link_query_heartbeat')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/synapse_link"
				},
				"content": {
					"query": "IF (NOT EXISTS(SELECT * FROM sys.credentials WHERE name = 'sudis-synapse-course-cosmos-db'))\n    CREATE CREDENTIAL [sudis-synapse-course-cosmos-db]\n    WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = 'Wre4gUxlfJkkUHkP5Wlg1YT5XuNnTmpU4PGNXmnapTdje9PvxxjGF84HpW4VvXYL3x9tF9oJOL0r4hbT4kHc1Q=='\nGO\n---- select query on CosmosDB\nSELECT TOP 100 *\nFROM OPENROWSET(​PROVIDER = 'CosmosDB',\n                CONNECTION = 'Account=sudis-synapse-course-cosmos-db;Database=nyctaxidb',\n                OBJECT = 'Heartbeat',\n                SERVER_CREDENTIAL = 'sudis-synapse-course-cosmos-db'\n) AS [Heartbeat]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nselect \n*\nFrom OPENROWSET(\n    BULK 'calendar.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as cal;\n\nEXEC sp_describe_first_result_set N'select \n*\nFrom OPENROWSET(\n    BULK ''calendar.csv'',\n    DATA_SOURCE = ''nyc_taxi_data_raw'',\n    FORMAT =''CSV'',\n    PARSER_VERSION = ''2.0'',\n    HEADER_ROW = TRUE\n) as cal\n'\n\nselect \n*\nFrom OPENROWSET(\n    BULK 'calendar.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) WITH (\n    date_key INT,\n    date DATE,\n    year SMALLINT,\n    month TINYINT,\n    day TINYINT,\n    day_name VARCHAR(10),\n    day_of_year SMALLINT,\n    week_of_month TINYINT,\n    week_of_year TINYINT,\n    month_name VARCHAR(10),\n    year_month INT,\n    year_week INT\n\n)\n as cal;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_external_date_sources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n-- Create External data source\nIF NOT EXISTS nyc_taxi_src\nCREATE EXTERNAL DATA SOURCE nyc_taxi_src \nWITH\n(\n    LOCATION = 'https://sudisynapsecoursedl.dfs.core.windows.net/nyc-taxi-data'\n);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_sp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n    \n    SET @create_sql_stmt = \n    'CREATE EXTERNAL TABLE gold.trip_data_green_' + @year +'_' + @month +\n        ' WITH (\n            LOCATION = ''gold/trip_data_green/year=' + @year +'/month=' + @month +''',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\n    SELECT \n        tdg.year,\n        tdg.month,\n        tz.borough,\n        convert(DATE, lpep_pickup_datetime) as trip_date,\n        cal.day_name as trip_day,\n        CASE WHEN cal.day_name in (''Saturday'',''Sunday'') THEN ''Y'' else ''N'' END as trip_day_weekend_ind,\n        sum(CASE WHEN PT.description = ''Credit Card'' THEN 1 else 0 end) as card_trip_count,\n        sum(CASE WHEN PT.description = ''Cash'' THEN 1 else 0 end) as cash_trip_count,\n        sum(CASE WHEN tt.trip_type_desc = ''Street-hail'' THEN 1 else 0 end) as Street_Hail_Trip_count,\n        sum(CASE WHEN tt.trip_type_desc = ''Dispatch'' THEN 1 else 0 end) as Dispatch_Trip_count,\n        SUM(tdg.trip_distance) as trip_distance,\n        SUM(DATEDIFF(MINUTE, tdg.lpep_pickup_datetime, tdg.lpep_dropoff_datetime)) as trip_duration_minutes,\n        SUM(tdg.fare_amount) as fare_amount\n        from SILVER.vw_trip_data_green tdg\n        JOIN SILVER.TAXI_ZONE TZ on (tdg.pu_location_id = tz.location_id)\n        JOIN silver.calendar CAL on (cal.date = convert(DATE, lpep_pickup_datetime))\n        JOIN SILVER.Payment_type pt on (tdg.payment_type = pt.payment_type)\n        JOIN silver.trip_type tt on (tdg.trip_type = tt.trip_type)\n    where tdg.YEAR ='''+ @year +''' \n    and tdg.MONTH='''+ @month +'''\n    group by tdg.year,\n         tdg.month,\n         tz.borough,\n         convert(DATE, lpep_pickup_datetime), \n         cal.day_name';\n   \n   print(@create_sql_stmt);\n\n   EXEC SP_executesql @create_sql_stmt;\n\n   SET @drop_sql_stmt = 'DROP EXTERNAL TABLE gold.trip_data_green_' + @year +'_' + @month;\n\n   print(@drop_sql_stmt);\n\n   EXEC SP_executesql @drop_sql_stmt;\nEND\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nselect \n*\nFrom OPENROWSET(\n    --BULK 'vendor.csv',\n    BULK 'vendor.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as vendor;\n\nexec sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''vendor.csv'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE \n    ) AS [result]'\n    ;\n\n\nselect \n*\nFrom OPENROWSET(\n    --BULK 'vendor.csv',\n    BULK 'vendor_escaped.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    ESCAPECHAR = '\\\\'\n) as vendor;\n\n\nselect \n*\nFrom OPENROWSET (\n    BULK 'trip_type.tsv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n     FIELDTERMINATOR ='\\t'\n) as trip_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_external_file_format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n---CSV file format\nIF NOT EXISTS (SELECT *FROM sys.external_file_formats WHERE name='csv_file_format')\n    CREATE EXTERNAL FILE FORMAT csv_file_format  \n    WITH (  \n            FORMAT_TYPE = DELIMITEDTEXT\n        , FORMAT_OPTIONS (\n                FIELD_TERMINATOR = ',' , \n                STRING_DELIMITER = '\"', \n                First_Row = 2 , -- ONLY AVAILABLE FOR AZURE SYNAPSE ANALYTICS\n                USE_TYPE_DEFAULT = FALSE ,\n                Encoding = 'UTF8' ,\n                PARSER_VERSION = '2.0'\n                )  \n    );\n\n--- TSV file format \n\nIF NOT EXISTS (SELECT *FROM sys.external_file_formats WHERE name='tsv_file_format')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format  \n    WITH (  \n            FORMAT_TYPE = DELIMITEDTEXT\n        , FORMAT_OPTIONS (\n                FIELD_TERMINATOR = '\\t' , \n                STRING_DELIMITER = '\"', \n                First_Row = 2 , -- ONLY AVAILABLE FOR AZURE SYNAPSE ANALYTICS\n                USE_TYPE_DEFAULT = FALSE ,\n                Encoding = 'UTF8' ,\n                PARSER_VERSION = '2.0'\n                )  \n    );\n\n--- Parquet file format\n\nIF NOT EXISTS (SELECT *FROM sys.external_file_formats WHERE name='parquet_file_format')\n    CREATE EXTERNAL FILE FORMAT parquet_file_format  \nWITH (  \n         FORMAT_TYPE = PARQUET \n         , DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'   \n    );\n\n\n-- Create an external file format for delta table files (serverless SQL pools in Synapse analytics and SQL Server 2022).\nIF NOT EXISTS (SELECT *FROM sys.external_file_formats WHERE name='delta_file_format')\nCREATE EXTERNAL FILE FORMAT delta_file_format  \nWITH (  \n         FORMAT_TYPE = DELTA  \n         -- DATA_COMPRESSION is available only in SQL Server\n        , DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec' )\n;  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_sp_gold_trip_data_green_assignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nSELECT *from silver.trip_type\nGO\n\nselect TOP 10 *from bronze.vw_trip_data_green_csv\nGO\n\nSELECT \n        tdg.year,\n        tdg.month,\n        tz.borough,\n        convert(DATE, lpep_pickup_datetime) as trip_date,\n        cal.day_name as trip_day,\n        tt.trip_type_desc ,\n        CASE WHEN cal.day_name in ('Saturday','Sunday') THEN 'Y' else 'N' END as trip_day_weekend_ind,\n        sum(CASE WHEN PT.description = 'Credit Card' THEN 1 else 0 end) as card_trip_count,\n        sum(CASE WHEN PT.description = 'Cash' THEN 1 else 0 end) as cash_trip_count ,\n        sum(CASE WHEN tt.trip_type_desc = 'Street-hail' THEN 1 else 0 end) as Street_Hail_Trip_count,\n        sum(CASE WHEN tt.trip_type_desc = 'Dispatch' THEN 1 else 0 end) as Dispatch_Trip_count,\n        SUM(tdg.trip_distance) as trip_distance,\n        SUM(DATEDIFF(MINUTE, tdg.lpep_pickup_datetime, tdg.lpep_dropoff_datetime)) as trip_duration_minutes,\n        SUM(tdg.fare_amount) as fare_amount\n        from SILVER.vw_trip_data_green tdg\n        JOIN SILVER.TAXI_ZONE TZ on (tdg.pu_location_id = tz.location_id)\n        JOIN silver.calendar CAL on (cal.date = convert(DATE, lpep_pickup_datetime))\n        JOIN SILVER.Payment_type pt on (tdg.payment_type = pt.payment_type)\n        JOIN silver.trip_type tt on (tdg.trip_type = tt.trip_type)\n    where tdg.YEAR = '2020'\n    and tdg.MONTH= '01'\n    group by tdg.year,\n         tdg.month,\n         tz.borough,\n         convert(DATE, lpep_pickup_datetime), \n         cal.day_name,\n         tt.trip_type_desc\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_external_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\n--- create external table using csv file format\n\nSELECT *FROM sys.external_tables;\nIF OBJECT_ID ( 'bronze.taxi_zone') is NOT NULL\n    drop EXTERNAL TABLE bronze.taxi_zone\n    -- creating external table taxi_zone\n    CREATE EXTERNAL TABLE bronze.taxi_zone\n        (   location_id SMALLINT ,\n            borough VARCHAR(15) ,\n            zone VARCHAR(50) ,\n            service_zone VARCHAR(15) )  \n        WITH (\n            LOCATION = 'raw/taxi_zone.csv',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = csv_file_format  \n        )\nGO\n\n\nselect *from bronze.taxi_zone\nGO\n\n--- create external table using csv file format\n\nIF OBJECT_ID ( 'bronze.calendar') is NOT NULL\n    drop EXTERNAL TABLE bronze.calendar\n    -- creating external table calendar\n    CREATE EXTERNAL TABLE bronze.calendar\n        (       date_key INT,\n                date DATE,\n                year SMALLINT,\n                month TINYINT,\n                day TINYINT,\n                day_name VARCHAR(10),\n                day_of_year SMALLINT,\n                week_of_month TINYINT,\n                week_of_year TINYINT,\n                month_name VARCHAR(10),\n                year_month INT,\n                year_week INT\n    )  \n        WITH (\n            LOCATION = 'raw/calendar.csv',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = csv_file_format  \n        )\nGO\n\nselect *from bronze.calendar\nGO\n\n--- create external table using CSV file format\n\nIF OBJECT_ID ( 'bronze.vendor') is NOT NULL\n    drop EXTERNAL TABLE bronze.vendor\n    -- creating external table vendor\n    CREATE EXTERNAL TABLE bronze.vendor\n        (       vendor_id TINYINT,\n                vendor_name VARCHAR(50)\n        )  \n        WITH (\n            LOCATION = 'raw/vendor.csv',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = csv_file_format  \n        )\nGO\n\nselect *from bronze.vendor\nGO\n\n--- create external table using TSV file format\n\nIF OBJECT_ID ( 'bronze.trip_type') is NOT NULL\n    drop EXTERNAL TABLE bronze.trip_type\n    -- creating external table vendor\n    CREATE EXTERNAL TABLE bronze.trip_type\n        (       trip_type TINYINT,\n                trip_type_desc VARCHAR(50)\n        )  \n        WITH (\n            LOCATION = 'raw/trip_type.tsv',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = tsv_file_format  \n        )\nGO\n\nselect *from bronze.trip_type\nGO\n\n--- create external table using csv file format and with multiple partitions\n\nIF OBJECT_ID ( 'bronze.trip_data_green_csv') is NOT NULL\n    drop EXTERNAL TABLE bronze.trip_data_green_csv\n    -- creating external table vendor\n    CREATE EXTERNAL TABLE bronze.trip_data_green_csv\n        (        VendorID\t\t\t\t int,\n                lpep_pickup_datetime     datetime2(7),\n                lpep_dropoff_datetime    datetime2(7),\n                store_and_fwd_flag       varchar(1),\n                RatecodeID               int,\n                PULocationID             int,\n                DOLocationID             int,\n                passenger_count          int,\n                trip_distance            float,\n                fare_amount              float,\n                extra                    float,\n                mta_tax                  float,\n                tip_amount               float,\n                tolls_amount             float,\n                ehail_fee                int,\n                improvement_surcharge    float,\n                total_amount             float,\n                payment_type             int,\n                trip_type                int,\n                congestion_surcharge     float\n        )  \n        WITH (\n            LOCATION = 'raw/trip_data_green_csv/**',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = csv_file_format  \n        )\nGO\n\nselect  TOP 100 \n*from bronze.trip_data_green_csv\nGO\n\n\n--- create external table using parquet file format\n\nIF OBJECT_ID ( 'bronze.trip_data_green_paruet') is NOT NULL\n    drop EXTERNAL TABLE bronze.trip_data_green_paruet\n    -- creating external table vendor\n    CREATE EXTERNAL TABLE bronze.trip_data_green_paruet\n        (        VendorID\t\t\t\t int,\n                lpep_pickup_datetime     datetime2(7),\n                lpep_dropoff_datetime    datetime2(7),\n                store_and_fwd_flag       varchar(1),\n                RatecodeID               int,\n                PULocationID             int,\n                DOLocationID             int,\n                passenger_count          int,\n                trip_distance            float,\n                fare_amount              float,\n                extra                    float,\n                mta_tax                  float,\n                tip_amount               float,\n                tolls_amount             float,\n                ehail_fee                int,\n                improvement_surcharge    float,\n                total_amount             float,\n                payment_type             int,\n                trip_type                int,\n                congestion_surcharge     float\n        )  \n        WITH (\n            LOCATION = 'raw/trip_data_green_parquet/**',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\nGO\n\nselect  TOP 100 \n*from bronze.trip_data_green_paruet\nGO\n\n\n--- create external table using delta file format\n\nIF OBJECT_ID ( 'bronze.trip_data_green_delta') is NOT NULL\n    drop EXTERNAL TABLE bronze.trip_data_green_delta\n    -- creating external table vendor\n    CREATE EXTERNAL TABLE bronze.trip_data_green_delta\n        (        VendorID\t\t\t\t int,\n                lpep_pickup_datetime     datetime2(7),\n                lpep_dropoff_datetime    datetime2(7),\n                store_and_fwd_flag       varchar(1),\n                RatecodeID               int,\n                PULocationID             int,\n                DOLocationID             int,\n                passenger_count          int,\n                trip_distance            float,\n                fare_amount              float,\n                extra                    float,\n                mta_tax                  float,\n                tip_amount               float,\n                tolls_amount             float,\n                ehail_fee                int,\n                improvement_surcharge    float,\n                total_amount             float,\n                payment_type             int,\n                trip_type                int,\n                congestion_surcharge     float\n        )  \n        WITH ( LOCATION = 'raw/trip_data_green_delta',  \n               DATA_SOURCE = nyc_taxi_src,  \n               FILE_FORMAT = delta_file_format  \n        )\nGO\n\nselect  TOP 100 \n*from bronze.trip_data_green_delta\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nselect \n*\nFrom OPENROWSET (\n    BULK 'trip_type.tsv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR ='\\t'\n) as trip_type;\n\n\nexec sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''trip_type.tsv'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR =''\\t'' \n    ) AS [result]'\n    ;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_sp_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_taxi_zone\nAS\nBEGIN\n\n    IF OBJECT_ID ( 'silver.taxi_zone') is NOT NULL\n        drop EXTERNAL TABLE silver.taxi_zone;\n        \n        -- creating external table taxi_zone\n        CREATE EXTERNAL TABLE silver.taxi_zone \n            WITH (\n                LOCATION = 'silver/taxi_zone',  \n                DATA_SOURCE = nyc_taxi_src,  \n                FILE_FORMAT = parquet_file_format  \n            )\n        AS\n        SELECT *from bronze.taxi_zone\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\n-- RATE code type view \nDROP VIEW IF EXISTS BRONZE.VW_RATE_CODE\nGO\n\nCREATE VIEW BRONZE.VW_RATE_CODE\nAS\nselect \nrate_code_id, rate_code\nFrom OPENROWSET (\n    BULK 'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_SRC',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as RATE_CODE\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n)\nGO\n\nselect *from BRONZE.vw_rate_code\nGO\n\n-- Payment type view \nDROP VIEW IF EXISTS BRONZE.vw_payment_type\nGO\n\nCREATE VIEW BRONZE.vw_payment_type\nAS\nselect \npayment_type, description\nFrom OPENROWSET (\n    BULK 'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0a',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as PAYMENT_TYPE\nCROSS APPLY openjson(jsonDoc)\nWITH(\n    payment_type SMALLINT,\n    description VARCHAR(20) '$.payment_type_desc'\n)\nGO\n\nselect *from BRONZE.vw_payment_type\nGO\n\n\n-- Trip date green  view \nDROP VIEW IF EXISTS BRONZE.vw_trip_data_green_csv\nGO\n\nCREATE VIEW BRONZE.vw_trip_data_green_csv\nAS\nselect \ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ngtd.*\nFrom OPENROWSET(\n    BULK ('raw/trip_data_green_csv/year=*/month=*/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) WITH(\nVendorID\t\t\t\t int,\nlpep_pickup_datetime     datetime2(7),\nlpep_dropoff_datetime    datetime2(7),\nstore_and_fwd_flag       varchar(1),\nRatecodeID               int,\nPULocationID             int,\nDOLocationID             int,\npassenger_count          int,\ntrip_distance            float,\nfare_amount              float,\nextra                    float,\nmta_tax                  float,\ntip_amount               float,\ntolls_amount             float,\nehail_fee                int,\nimprovement_surcharge    float,\ntotal_amount             float,\npayment_type             int,\ntrip_type                int,\ncongestion_surcharge     float\n)as gtd\nGO\n\nselect TOP 100 *from BRONZE.vw_trip_data_green_csv where year = '2020' and Month = '01'\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_explore_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nselect \n*\nFrom OPENROWSET (\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0a',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as PAYMENT_TYPE;\n\n\nselect \njsonDoc, payment_type, description\nFrom OPENROWSET (\n    BULK 'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0a',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as PAYMENT_TYPE\nCROSS APPLY openjson(jsonDoc)\nWITH(\n    payment_type SMALLINT,\n    description VARCHAR(20) '$.payment_type_desc'\n)\n;\n\n-- Reading data from json file with an array of values\n\nselect \n        CAST(JSON_VALUE(jsonDoc, '$.payment_type') as SMALLINT) as paymment_type,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc[0].value') as VARCHAR(15)) as paymment_type_desc0,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc[1].value') as VARCHAR(15)) as paymment_type_desc01\nFrom OPENROWSET (\n    BULK 'payment_type_array.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0a',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as PAYMENT_TYPE\n;\n\n\n-- Use openjson to explode the array\nselect \n*\nFrom OPENROWSET (\n    BULK 'payment_type_array.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0a',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as PAYMENT_TYPE\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    payment_type SMALLINT,\n    payment_type_desc NVARCHAR(MAX) as JSON\n)\nCROSS APPLY OPENJSON(payment_type_desc)\nWITH(\n    sub_type SMALLINT,\n    value VARCHAR(20)\n)\n;\n\n\nselect \npayment_type, payment_type_desc_value\nFrom OPENROWSET (\n    BULK 'payment_type_array.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0a',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as PAYMENT_TYPE\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    payment_type SMALLINT,\n    payment_type_desc NVARCHAR(MAX) as JSON\n)\nCROSS APPLY OPENJSON(payment_type_desc)\nWITH(\n    sub_type SMALLINT,\n    payment_type_desc_value VARCHAR(20) '$.value'\n)\n;\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_sp_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_calendar\nAS\nBEGIN\n\n    IF OBJECT_ID ( 'silver.calendar') is NOT NULL\n        drop EXTERNAL TABLE silver.calendar;\n        \n        -- creating external table calendar\n        CREATE EXTERNAL TABLE silver.calendar \n            WITH (\n                LOCATION = 'silver/calendar',  \n                DATA_SOURCE = nyc_taxi_src,  \n                FILE_FORMAT = parquet_file_format  \n            )\n        AS\n        SELECT *from bronze.calendar\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nIF OBJECT_ID ( 'silver.taxi_zone') is NOT NULL\n    drop EXTERNAL TABLE silver.taxi_zone\n    -- creating external table taxi_zone\n    CREATE EXTERNAL TABLE silver.taxi_zone \n        WITH (\n            LOCATION = 'silver/taxi_zone',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\n    SELECT *from bronze.taxi_zone\nGO\n\nSELECT *from silver.taxi_zone\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- single line json array explode\nselect \n*\nFrom OPENROWSET (\n    BULK 'rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as RATE_CODE\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n)\n;\n\n-- multi line json array explode\nselect \n*\nFrom OPENROWSET (\n    BULK 'rate_code_multi_line.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'CSV',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '0x0b',\n    ROWTERMINATOR = '0x0b',\n    FIELDQUOTE = '0x0b'\n) \nWITH(\n    jsonDoc NVARCHAR(MAX)\n) as RATE_CODE\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n)\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_sp_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_trip_type\nAS\nBEGIN \n\n    IF OBJECT_ID ( 'silver.trip_type') is NOT NULL\n        drop EXTERNAL TABLE silver.trip_type\n        -- creating external table trip_type\n        CREATE EXTERNAL TABLE silver.trip_type \n            WITH (\n                LOCATION = 'silver/trip_type',  \n                DATA_SOURCE = nyc_taxi_src,  \n                FILE_FORMAT = parquet_file_format  \n            )\n        AS\n        SELECT *from bronze.trip_type\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nIF OBJECT_ID ( 'silver.calendar') is NOT NULL\n    drop EXTERNAL TABLE silver.calendar\n    -- creating external table calendar\n    CREATE EXTERNAL TABLE silver.calendar \n        WITH (\n            LOCATION = 'silver/calendar',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\n    SELECT *from bronze.calendar\nGO\n\nSELECT *from silver.calendar\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nselect \n*\nFrom OPENROWSET(\n    BULK 'trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as green_tripdata;\n\n-- Data selection from a folder\n\nselect \n*\nFrom OPENROWSET(\n    BULK 'trip_data_green_csv/year=2020/month=01/*.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as green_tripdata;\n\n\n-- Data selection from a sub folders\nselect \n*\nFrom OPENROWSET(\n    BULK 'trip_data_green_csv/year=2020/**',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as green_tripdata;\n\n-- Get data from more than one file\nselect \n*\nFrom OPENROWSET(\n    BULK ('trip_data_green_csv/year=2020/month=01/*.csv','trip_data_green_csv/year=2020/month=02/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as green_tripdata;\n\n\n-- Get data from more than one folder\nselect \n*\nFrom OPENROWSET(\n    BULK ('trip_data_green_csv/year=*/month=*/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as green_tripdata;\n\n\n-- Get data along with file name using meta data function filename()\nselect \nTOP 100\ngtd.filename() as filename ,\ngtd.*\nFrom OPENROWSET(\n    BULK ('trip_data_green_csv/year=2020/month=01/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as gtd;\n\n\n-- How many records for each file \nselect \nTOP 100\ngtd.filename() as filename ,\ncount(1) as record_count\nFrom OPENROWSET(\n    BULK ('trip_data_green_csv/year=*/month=*/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as gtd\ngroup by gtd.filename()\norder by gtd.filename();\n\n-- limit the data using file name  function filename()\nselect \nTOP 100\ngtd.filename() as filename ,\ncount(1) as record_count\nFrom OPENROWSET(\n    BULK ('trip_data_green_csv/year=*/month=*/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as gtd\nwhere gtd.filename() in ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\ngroup by gtd.filename()\norder by gtd.filename();\n\n-- Using file path function filepath()\nselect \nTOP 100\ngtd.filename() as filename ,\ngtd.filepath() as filepath ,\ncount(1) as record_count\nFrom OPENROWSET(\n    BULK ('trip_data_green_csv/year=*/month=*/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as gtd\nwhere gtd.filename() in ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\ngroup by gtd.filename(),gtd.filepath()\norder by gtd.filename(),gtd.filepath();\n\n\n-- Using file path function along with parameters\nselect \nTOP 100\ngtd.filename() as filename ,\ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ncount(1) as record_count\nFrom OPENROWSET(\n    BULK ('trip_data_green_csv/year=*/month=*/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as gtd\nwhere gtd.filename() in ('green_tripdata_2020-01.csv','green_tripdata_2021-01.csv')\ngroup by gtd.filename(), gtd.filepath(1), gtd.filepath(2)\norder by gtd.filename(), gtd.filepath(1), gtd.filepath(2);\n\n\n-- Using file path function along with parameters\nselect \nTOP 100\ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ncount(1) as record_count\nFrom OPENROWSET(\n    BULK ('trip_data_green_csv/year=*/month=*/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as gtd\ngroup by gtd.filename(), gtd.filepath(1), gtd.filepath(2)\norder by gtd.filename(), gtd.filepath(1), gtd.filepath(2);\n\n-- Using file path function along with parameters\nselect \nTOP 100\ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ncount(1) as record_count\nFrom OPENROWSET(\n    BULK ('trip_data_green_csv/year=*/month=*/*.csv'),\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT ='CSV',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n) as gtd\nwhere gtd.filepath(1) = '2020'\nand gtd.filepath(2) in ('06','07','08') -- Using file path in where clause\ngroup by gtd.filename(), gtd.filepath(1), gtd.filepath(2)\norder by gtd.filename(), gtd.filepath(1), gtd.filepath(2);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_sp_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_vendor\nAS\nBEGIN \n\n    IF OBJECT_ID ( 'silver.vendor') is NOT NULL\n        drop EXTERNAL TABLE silver.vendor\n        -- creating external table vendor\n        CREATE EXTERNAL TABLE silver.vendor \n            WITH (\n                LOCATION = 'silver/vendor',  \n                DATA_SOURCE = nyc_taxi_src,  \n                FILE_FORMAT = parquet_file_format  \n            )\n        AS\n        SELECT *from bronze.vendor\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nIF OBJECT_ID ( 'silver.trip_type') is NOT NULL\n    drop EXTERNAL TABLE silver.trip_type\n    -- creating external table trip_type\n    CREATE EXTERNAL TABLE silver.trip_type \n        WITH (\n            LOCATION = 'silver/trip_type',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\n    SELECT *from bronze.trip_type\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n;\n-- identify the data types of the parquet file\nexec sp_describe_first_result_set N'\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_parquet/year=2020/month=01/'',\n        FORMAT = ''PARQUET'',\n        DATA_SOURCE = ''nyc_taxi_data_raw''\n    ) AS [result]\n    '\n    ;\n\n--- define column and data type\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) WITH(\nVendorID\t\t\t\t int,\nlpep_pickup_datetime     datetime2(7),\nlpep_dropoff_datetime    datetime2(7),\nstore_and_fwd_flag       varchar(1),\nRatecodeID               int,\nPULocationID             int,\nDOLocationID             int,\npassenger_count          int,\ntrip_distance            float,\nfare_amount              float,\nextra                    float,\nmta_tax                  float,\ntip_amount               float,\ntolls_amount             float,\nehail_fee                int,\nimprovement_surcharge    float,\ntotal_amount             float,\npayment_type             int,\ntrip_type                int,\ncongestion_surcharge     float\n    )\n    AS [result]\n;\n--- selected columns only for less amount of data to be processed\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) WITH(\ntip_amount               float,\ntrip_type                int,\ncongestion_surcharge     float\n    )\n    AS [result]\n;\n/*\n    Assignment \n    -----------\n    1) query from folders using wildcard characters\n    2) use filename function \n    3) query from subfolders\n    4) use filepath function to select only from certain partitions\n*/\n\n--- Query from folders using wildcard characters\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n;\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]\n;\n\n\n-- Get data along with file name using meta data function filename()\nselect \nTOP 100\ngtd.filename() as filename ,\ngtd.*\nFrom  OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n) as gtd;\n\n-- Record count for each file\nselect \nTOP 100\ngtd.filename() as filename ,\ncount(1) as RECORD_COUNT\nFrom  OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n) as gtd\ngroup by gtd.filename()\norder by gtd.filename();\n\n-- Limting the data based on filename in where clause\nselect \nTOP 100\ngtd.filename() as filename ,\ncount(1) as RECORD_COUNT\nFrom  OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n) as gtd\nwhere gtd.filename() in ('part-00000-tid-1069015557154220032-4ec3dcd3-545e-4d76-814f-e61930d9d012-133-1-c000.snappy.parquet',\n'part-00000-tid-2915260729203946702-45e02e93-498c-4412-8770-9795c5bf4c2a-118-1-c000.snappy.parquet'\n,'part-00000-tid-7369040652349253775-55a08cd7-e7e7-42bb-b933-15f17a65da9a-152-1-c000.snappy.parquet')\ngroup by gtd.filename()\norder by gtd.filename();\n\n-- Using the data based on filename in where clause\nselect \nTOP 100\ngtd.filename() as filename ,\ngtd.filepath() as filepath ,\ncount(1) as RECORD_COUNT\nFrom  OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n) as gtd\nwhere gtd.filename() in ('part-00000-tid-1069015557154220032-4ec3dcd3-545e-4d76-814f-e61930d9d012-133-1-c000.snappy.parquet',\n'part-00000-tid-2915260729203946702-45e02e93-498c-4412-8770-9795c5bf4c2a-118-1-c000.snappy.parquet'\n,'part-00000-tid-7369040652349253775-55a08cd7-e7e7-42bb-b933-15f17a65da9a-152-1-c000.snappy.parquet')\ngroup by gtd.filename(), gtd.filepath()\norder by gtd.filename(), gtd.filepath();\n\n-- Using file path function along with parameters\nselect \nTOP 100\ngtd.filename() as filename ,\ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ncount(1) as record_count\nFrom OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n) as gtd\nwhere gtd.filename() in ('part-00000-tid-1069015557154220032-4ec3dcd3-545e-4d76-814f-e61930d9d012-133-1-c000.snappy.parquet',\n'part-00000-tid-2915260729203946702-45e02e93-498c-4412-8770-9795c5bf4c2a-118-1-c000.snappy.parquet'\n,'part-00000-tid-7369040652349253775-55a08cd7-e7e7-42bb-b933-15f17a65da9a-152-1-c000.snappy.parquet')\ngroup by gtd.filename(), gtd.filepath(1), gtd.filepath(2)\norder by gtd.filename(), gtd.filepath(1), gtd.filepath(2);\n\n\n-- Using file path function along with parameters\nselect \nTOP 100\ngtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\ngtd.filepath(2) as MONTH ,\ncount(1) as record_count\nFrom OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n) as gtd\nwhere gtd.filepath(1) = '2020'\nand gtd.filepath(2) in ('06','07','08') -- Using file path in where clause\ngroup by gtd.filepath(1), gtd.filepath(2)\norder by gtd.filepath(1), gtd.filepath(2);\n\n\n-- Query from sub folders\nselect \nTOP 100\ngtd.filename() as filename ,\ngtd.filepath() as filepath,\ngtd.filepath(1) as filepath_FIRST,\ncount(1) as record_count\nFrom OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n) as gtd\ngroup by gtd.filename(),gtd.filepath(),gtd.filepath(1)\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_sp_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_rate_code\nAS\nBEGIN \n\n    IF OBJECT_ID ( 'silver.rate_code') is NOT NULL\n        drop EXTERNAL TABLE silver.rate_code\n        -- creating external table rate_code\n        CREATE EXTERNAL TABLE silver.rate_code \n            WITH (\n                LOCATION = 'silver/rate_code',  \n                DATA_SOURCE = nyc_taxi_src,  \n                FILE_FORMAT = parquet_file_format  \n            )\n        AS\n    select \n    rate_code_id, rate_code\n    From OPENROWSET (\n        BULK 'raw/rate_code.json',\n        DATA_SOURCE = 'nyc_taxi_SRC',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) as RATE_CODE\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH (\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20)\n    )\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nIF OBJECT_ID ( 'silver.vendor') is NOT NULL\n    drop EXTERNAL TABLE silver.vendor\n    -- creating external table vendor\n    CREATE EXTERNAL TABLE silver.vendor \n        WITH (\n            LOCATION = 'silver/vendor',  \n            DATA_SOURCE = nyc_taxi_src,  \n            FILE_FORMAT = parquet_file_format  \n        )\n    AS\n    SELECT *from bronze.vendor\nGO\n\nSELECT *from silver.vendor\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/Discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta',\n        FORMAT = 'DELTA',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_delta\n;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_sp_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/Stored_Procedural_Scripts"
				},
				"content": {
					"query": "use nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.sp_silver_payment_type\nAS\nBEGIN \n\n    IF OBJECT_ID ( 'silver.payment_type') is NOT NULL\n        drop EXTERNAL TABLE silver.payment_type\n        -- creating external table payment_type\n        CREATE EXTERNAL TABLE silver.payment_type \n            WITH (\n                LOCATION = 'silver/payment_type',  \n                DATA_SOURCE = nyc_taxi_src,  \n                FILE_FORMAT = parquet_file_format  \n            )\n        AS\n    select \n    payment_type, description\n    From OPENROWSET (\n        BULK 'raw/payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0a',\n        FIELDQUOTE = '0x0b'\n    ) \n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) as PAYMENT_TYPE\n    CROSS APPLY openjson(jsonDoc)\n    WITH(\n        payment_type SMALLINT,\n        description VARCHAR(20) '$.payment_type_desc'\n    )\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Script_WorkBench')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\nSELECT DISTINCT \n         year\n       , month\nFROM BRONZE.vw_trip_data_green_csv\norder by year, month ASC;\n\n\nSELECT DISTINCT\n        YEAR\n      , MONTH\nFROM SILVER.vw_trip_data_green\nORDER BY year, month ASC;\n\nSELECT TOP 100 *\nFROM SILVER.vw_trip_data_green\n;\n\n\nselect \n * FROM gold.vw_trip_data_green \nGO\n\nselect TOP 100 * from SILVER.TAXI_ZONE;\n\n\n    SELECT \n        tdg.year,\n        tdg.month,\n        tz.borough,\n        convert(DATE, lpep_pickup_datetime) as trip_date,\n        cal.day_name as trip_day,\n        CASE WHEN cal.day_name in ('Saturday','Sunday') THEN 'Y' else 'N' END as trip_day_weekend_ind,\n        sum(CASE WHEN PT.description = 'Credit Card' THEN 1 else 0 end) as card_trip_count,\n        sum(CASE WHEN PT.description = 'Cash' THEN 1 else 0 end) as cash_trip_count,\n        sum(CASE WHEN tt.trip_type_desc = 'Street-hail' THEN 1 else 0 end) as Street_Hail_Trip_count,\n        sum(CASE WHEN tt.trip_type_desc = 'Dispatch' THEN 1 else 0 end) as Dispatch_Trip_count,\n        SUM(tdg.trip_distance) as trip_distance,\n        SUM(DATEDIFF(MINUTE, tdg.lpep_pickup_datetime, tdg.lpep_dropoff_datetime)) as trip_duration_minutes,\n        SUM(tdg.fare_amount) as fare_amount\n        from SILVER.vw_trip_data_green tdg\n        JOIN SILVER.TAXI_ZONE TZ on (tdg.pu_location_id = tz.location_id)\n        JOIN silver.calendar CAL on (cal.date = convert(DATE, lpep_pickup_datetime))\n        JOIN SILVER.Payment_type pt on (tdg.payment_type = pt.payment_type)\n        JOIN silver.trip_type tt on (tdg.trip_type = tt.trip_type)\n    where tdg.YEAR ='2020' \n    and tdg.MONTH='04'\n    group by tdg.year,\n         tdg.month,\n         tz.borough,\n         convert(DATE, lpep_pickup_datetime), \n         cal.day_name\n;\n\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nselect\n--gtd.filepath(1) as YEAR , -- based on the numerica value it will return the position of the wildcard character\n--gtd.filepath(2) as MONTH ,\ngtd.*\nFrom OPENROWSET(\n        BULK 'gold/trip_data_green/year=2020/month=01/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_src'\n) with (\n    borough VARCHAR(15),\n    trip_date date,\n    trip_day  VARCHAR(10),\n    trip_day_weekend_ind CHAR(1),\n    card_trip_count INT,\n    cash_trip_count INT,\n    Street_Hail_Trip_count INT,\n    Dispatch_Trip_count INT,\n    trip_distance FLOAT,\n    trip_duration_minutes INT,\n    fare_amount FLOAT\n) as gtd;\n\nselect TOP 100 * From OPENROWSET(\n        BULK 'gold/trip_data_green/year=2020/month=01/*.parquet',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_src'\n) \nas [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_spark_create_gold_trip_data_green_agg')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sudissynapse",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a11497e8-b2f9-4782-b683-31ea78fdaa4d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/38d4fe58-634d-4f17-b757-7d417cc3165d/resourceGroups/Synapse-course-rg/providers/Microsoft.Synapse/workspaces/sudi-synapse-course-ws/bigDataPools/sudissynapse",
						"name": "sudissynapse",
						"type": "Spark",
						"endpoint": "https://sudi-synapse-course-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sudissynapse",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Trip Data Aggregation \n",
							"### Group By Columns\n",
							"1. year\n",
							"2. Month\n",
							"3. Pickup Location ID\n",
							"4. Drop Off Location ID\n",
							"\n",
							"### Aggregated Columns\n",
							"1. Total Trip Count\n",
							"2. Total Fare Amount\n",
							"\n",
							"### Purpose of the notebook\n",
							"\n",
							"Demonstrate the integration between Spark Pool and Serverless SQL Pool\n",
							"\n",
							"1. Create the aggregated table in Spark Pool\n",
							"2. Access the data from Serverless SQL Pool "
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the folder paths so that it can be used later. \n",
							"bronze_folder_path = 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/raw'\n",
							"silver_folder_path = 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/silver'\n",
							"gold_folder_path = 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/gold'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Set the spark config to be able to get the partitioned columns year and month as strings rather than integers\n",
							"spark.conf.set(\"spark.sql.sources.partitionColumnTypeInference.enabled\", \"false\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"\n",
							"-- Create database to which we are going to write the data\n",
							"\n",
							"CREATE DATABASE IF NOT EXISTS nyc_taxi_ldw_spark\n",
							"LOCATION 'abfss://nyc-taxi-data@sudisynapsecoursedl.dfs.core.windows.net/gold';"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read the silver data to be processed. \n",
							"trip_data_green_df = spark.read.parquet(f\"{silver_folder_path}/trip_data_green\") "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Perform the required aggregations\n",
							"# 1. Total trip count\n",
							"# 2. Total fare amount\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"trip_data_green_agg_df = trip_data_green_df \\\n",
							"                        .groupBy(\"year\", \"month\", \"pu_location_id\", \"do_location_id\") \\\n",
							"                        .agg(count(lit(1)).alias(\"total_trip_count\"),\n",
							"                        round(sum(\"fare_amount\"), 2).alias(\"total_fare_amount\"))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Write the aggregated data to the gold table for consumption\n",
							"\n",
							"trip_data_green_agg_df.write.mode(\"overwrite\").partitionBy(\"year\", \"month\").format(\"parquet\").saveAsTable(\"nyc_taxi_ldw_spark.trip_data_green_agg\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sudissynapse",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f9e61e0b-8c5b-4746-9ae9-4420faab2035"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/38d4fe58-634d-4f17-b757-7d417cc3165d/resourceGroups/Synapse-course-rg/providers/Microsoft.Synapse/workspaces/sudi-synapse-course-ws/bigDataPools/sudissynapse",
						"name": "sudissynapse",
						"type": "Spark",
						"endpoint": "https://sudi-synapse-course-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sudissynapse",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 3
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sudissynapse')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 0,
					"minNodeCount": 0
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		}
	]
}